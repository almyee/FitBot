{"ast":null,"code":"var _jsxFileName = \"/Users/alyssayee/Library/Mobile Documents/com~apple~CloudDocs/School/College/UCD/Classes/ECS 273/github/FitBot/fitbot/frontend/src/examples/Navbars/DashboardNavbar/index.js\",\n  _s = $RefreshSig$();\n/**\n=========================================================\n* Soft UI Dashboard React - v4.0.1\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/soft-ui-dashboard-react\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\n// import { useState, useEffect } from \"react\";\n\n// // react-router components\n// import { useLocation, Link } from \"react-router-dom\";\n\n// // prop-types is a library for typechecking of props.\n// import PropTypes from \"prop-types\";\n\n// // @material-ui core components\n// import AppBar from \"@mui/material/AppBar\";\n// import Toolbar from \"@mui/material/Toolbar\";\n// import IconButton from \"@mui/material/IconButton\";\n// import Menu from \"@mui/material/Menu\";\n// import Icon from \"@mui/material/Icon\";\n\n// // Soft UI Dashboard React components\n// import SoftBox from \"../../../components/SoftBox\";\n// import SoftTypography from \"../../../components/SoftTypography\";\n// import SoftInput from \"../../../components/SoftInput\";\n\n// // Soft UI Dashboard React examples\n// import Breadcrumbs from \"../../Breadcrumbs\";\n// import NotificationItem from \"../../Items/NotificationItem\";\n\n// // Custom styles for DashboardNavbar\n// import {\n//   navbar,\n//   navbarContainer,\n//   navbarRow,\n//   navbarIconButton,\n//   navbarMobileMenu,\n// } from \"../../../examples/Navbars/DashboardNavbar/styles\";\n\n// // Soft UI Dashboard React context\n// import {\n//   useSoftUIController,\n//   setTransparentNavbar,\n//   setMiniSidenav,\n//   setOpenConfigurator,\n// } from \"../../../context\";\n\n// // Images\n// // import team2 from \"../../../assets/images/team-2.jpg\";\n// // import logoSpotify from \"../../../assets/images/small-logos/logo-spotify.svg\";\n// import AdbIcon from '@mui/icons-material/Adb';\n// import SettingsIcon from '@mui/icons-material/Settings';\n// function DashboardNavbar({ absolute, light, isMini }) {\n//   const [navbarType, setNavbarType] = useState();\n//   const [controller, dispatch] = useSoftUIController();\n//   const { miniSidenav, transparentNavbar, fixedNavbar, openConfigurator } = controller;\n//   const [openMenu, setOpenMenu] = useState(false);\n//   const route = useLocation().pathname.split(\"/\").slice(1);\n\n//   useEffect(() => {\n//     // Setting the navbar type\n//     if (fixedNavbar) {\n//       setNavbarType(\"sticky\");\n//     } else {\n//       setNavbarType(\"static\");\n//     }\n\n//     // A function that sets the transparent state of the navbar.\n//     function handleTransparentNavbar() {\n//       setTransparentNavbar(dispatch, (fixedNavbar && window.scrollY === 0) || !fixedNavbar);\n//     }\n\n//     window.addEventListener(\"scroll\", handleTransparentNavbar);\n//     handleTransparentNavbar();\n//     return () => window.removeEventListener(\"scroll\", handleTransparentNavbar);\n//   }, [dispatch, fixedNavbar]);\n\n//   const handleMiniSidenav = () => setMiniSidenav(dispatch, !miniSidenav);\n//   const handleConfiguratorOpen = () => setOpenConfigurator(dispatch, !openConfigurator);\n//   const handleOpenMenu = (event) => setOpenMenu(event.currentTarget);\n//   const handleCloseMenu = () => setOpenMenu(false);\n\n//   // Render the notifications menu\n//   const renderMenu = () => (\n//     <Menu\n//       anchorEl={openMenu}\n//       anchorReference={null}\n//       anchorOrigin={{\n//         vertical: \"bottom\",\n//         horizontal: \"left\",\n//       }}\n//       open={Boolean(openMenu)}\n//       onClose={handleCloseMenu}\n//       sx={{ mt: 2 }}\n//     >\n//       <NotificationItem\n//         image={<AdbIcon />}\n//         title={[\"New message\", \"from Bot\"]}\n//         date=\"1 minutes ago\"\n//         onClick={handleCloseMenu}\n//       />\n//     </Menu>\n//   );\n\n//   return (\n//     <AppBar\n//       position={absolute ? \"absolute\" : navbarType}\n//       color=\"inherit\"\n//       sx={(theme) => navbar(theme, { transparentNavbar, absolute, light })}\n//     >\n//       <Toolbar sx={(theme) => navbarContainer(theme)}>\n//       <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n//         <SoftTypography variant=\"h6\" fontWeight=\"bold\" color=\"primary\">\n//           FitBot\n//         </SoftTypography>\n//       </Link>\n\n//         {isMini ? null : (\n//           <SoftBox\n//             sx={(theme) => ({\n//               ...navbarRow(theme, { isMini }),\n//               flexWrap: \"nowrap\",           // Prevent wrapping\n//               alignItems: \"center\",         // Vertical alignment\n//               gap: theme.spacing(2),        // More spacing between items\n//             })}\n//           >\n//             <SoftBox color={light ? \"white\" : \"inherit\"} sx={{ display: \"flex\", gap: 2 }}>\n//               <Link to=\"/sign-in\">\n//                 <IconButton sx={{ ...navbarIconButton, display: \"flex\", alignItems: \"center\", gap: 0.5 }} size=\"small\">\n//                   <SoftTypography variant=\"button\" fontWeight=\"medium\">\n//                     Sign In/Out\n//                   </SoftTypography>\n//                 </IconButton>\n//               </Link>\n//               <Link to=\"/settings\">\n//                 <IconButton\n//                   size=\"small\"\n//                   color=\"inherit\"\n//                   sx={navbarIconButton}\n//                   // onClick={handleConfiguratorOpen}\n//                 >\n//                   <SettingsIcon />\n//                 </IconButton>\n//               </Link>\n//               <IconButton\n//                 size=\"small\"\n//                 color=\"inherit\"\n//                 sx={navbarIconButton}\n//                 aria-controls=\"notification-menu\"\n//                 aria-haspopup=\"true\"\n//                 variant=\"contained\"\n//                 onClick={handleOpenMenu}\n//               >\n//                 <AdbIcon />\n//               </IconButton>\n//               {renderMenu()}\n//             </SoftBox>\n//           </SoftBox>\n//         )}\n//       </Toolbar>\n//     </AppBar>\n//   );\n// }\n\n// // Setting default values for the props of DashboardNavbar\n// DashboardNavbar.defaultProps = {\n//   absolute: false,\n//   light: false,\n//   isMini: false,\n// };\n\n// // Typechecking props for the DashboardNavbar\n// DashboardNavbar.propTypes = {\n//   absolute: PropTypes.bool,\n//   light: PropTypes.bool,\n//   isMini: PropTypes.bool,\n// };\n\n// export default DashboardNavbar;\n\nimport { useState, useEffect } from \"react\";\nimport { useLocation, Link, useNavigate } from \"react-router-dom\"; // ✅ added useNavigate\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Menu from \"@mui/material/Menu\";\nimport Icon from \"@mui/material/Icon\";\nimport SoftBox from \"../../../components/SoftBox\";\nimport SoftTypography from \"../../../components/SoftTypography\";\nimport SoftInput from \"../../../components/SoftInput\";\nimport Breadcrumbs from \"../../Breadcrumbs\";\nimport NotificationItem from \"../../Items/NotificationItem\";\nimport { navbar, navbarContainer, navbarRow, navbarIconButton, navbarMobileMenu } from \"./styles\";\nimport { useSoftUIController, setTransparentNavbar, setMiniSidenav, setOpenConfigurator } from \"../../../context\";\nimport AdbIcon from '@mui/icons-material/Adb';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DashboardNavbar({\n  absolute,\n  light,\n  isMini\n}) {\n  _s();\n  const [navbarType, setNavbarType] = useState();\n  const [controller, dispatch] = useSoftUIController();\n  const {\n    miniSidenav,\n    transparentNavbar,\n    fixedNavbar,\n    openConfigurator\n  } = controller;\n  const [openMenu, setOpenMenu] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // ✅ state to track login status\n  const route = useLocation().pathname.split(\"/\").slice(1);\n  const navigate = useNavigate(); // ✅ hook for navigation\n\n  useEffect(() => {\n    // Setting the navbar type\n    if (fixedNavbar) {\n      setNavbarType(\"sticky\");\n    } else {\n      setNavbarType(\"static\");\n    }\n    function handleTransparentNavbar() {\n      setTransparentNavbar(dispatch, fixedNavbar && window.scrollY === 0 || !fixedNavbar);\n    }\n    window.addEventListener(\"scroll\", handleTransparentNavbar);\n    handleTransparentNavbar();\n    return () => window.removeEventListener(\"scroll\", handleTransparentNavbar);\n  }, [dispatch, fixedNavbar]);\n  useEffect(() => {\n    const currentUser = localStorage.getItem(\"currentUser\");\n    setIsLoggedIn(!!currentUser); // ✅ check login status on mount\n  }, [route]); // ✅ update login status when route changes\n\n  const handleMiniSidenav = () => setMiniSidenav(dispatch, !miniSidenav);\n  const handleConfiguratorOpen = () => setOpenConfigurator(dispatch, !openConfigurator);\n  const handleOpenMenu = event => setOpenMenu(event.currentTarget);\n  const handleCloseMenu = () => setOpenMenu(false);\n\n  // const handleSignInOut = () => {\n  //   const currentUser = localStorage.getItem(\"currentUser\");\n  //   if (currentUser) {\n  //     localStorage.removeItem(\"currentUser\");  // ✅ log out\n  //     setIsLoggedIn(false);\n  //     alert(\"You have been logged out.\");\n  //     navigate(\"/sign-in\");\n  //   } else {\n  //     navigate(\"/sign-in\");  // ✅ if not logged in, go to sign-in page\n  //   }\n  // };\n  const handleSignInOut = () => {\n    const currentUser = localStorage.getItem(\"currentUser\");\n    if (currentUser) {\n      // Comment or remove this line to keep localStorage intact\n      // localStorage.removeItem(\"currentUser\");  // No longer removing currentUser\n\n      setIsLoggedIn(false); // Mark as logged out in the UI\n      alert(\"You have been logged out.\");\n      navigate(\"/sign-in\"); // Redirect to the sign-in page\n    } else {\n      navigate(\"/sign-in\"); // If not logged in, just go to the sign-in page\n    }\n  };\n  const renderMenu = () => /*#__PURE__*/_jsxDEV(Menu, {\n    anchorEl: openMenu,\n    anchorReference: null,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    open: Boolean(openMenu),\n    onClose: handleCloseMenu,\n    sx: {\n      mt: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(NotificationItem, {\n      image: /*#__PURE__*/_jsxDEV(AdbIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 16\n      }, this),\n      title: [\"New message\", \"from Bot\"],\n      date: \"1 minutes ago\",\n      onClick: handleCloseMenu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(AppBar, {\n    position: absolute ? \"absolute\" : navbarType,\n    color: \"inherit\",\n    sx: theme => navbar(theme, {\n      transparentNavbar,\n      absolute,\n      light\n    }),\n    children: /*#__PURE__*/_jsxDEV(Toolbar, {\n      sx: theme => navbarContainer(theme),\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        style: {\n          textDecoration: \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(SoftTypography, {\n          variant: \"h6\",\n          fontWeight: \"bold\",\n          color: \"primary\",\n          children: \"FitBot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), isMini ? null : /*#__PURE__*/_jsxDEV(SoftBox, {\n        sx: theme => ({\n          ...navbarRow(theme, {\n            isMini\n          }),\n          flexWrap: \"nowrap\",\n          alignItems: \"center\",\n          gap: theme.spacing(2)\n        }),\n        children: /*#__PURE__*/_jsxDEV(SoftBox, {\n          color: light ? \"white\" : \"inherit\",\n          sx: {\n            display: \"flex\",\n            gap: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            sx: {\n              ...navbarIconButton,\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: 0.5\n            },\n            size: \"small\",\n            onClick: handleSignInOut // ✅ use function instead of <Link>\n            ,\n            children: /*#__PURE__*/_jsxDEV(SoftTypography, {\n              variant: \"button\",\n              fontWeight: \"medium\",\n              children: [isLoggedIn ? \"Sign Out\" : \"Sign In\", \"  \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/settings\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              color: \"inherit\",\n              sx: navbarIconButton,\n              children: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            color: \"inherit\",\n            sx: navbarIconButton,\n            \"aria-controls\": \"notification-menu\",\n            \"aria-haspopup\": \"true\",\n            variant: \"contained\",\n            onClick: handleOpenMenu,\n            children: /*#__PURE__*/_jsxDEV(AdbIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this), renderMenu()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 5\n  }, this);\n}\n_s(DashboardNavbar, \"b5K3GN8Fxoia3o5gIIfR+sVxt5w=\", false, function () {\n  return [useSoftUIController, useLocation, useNavigate];\n});\n_c = DashboardNavbar;\nDashboardNavbar.defaultProps = {\n  absolute: false,\n  light: false,\n  isMini: false\n};\nDashboardNavbar.propTypes = {\n  absolute: PropTypes.bool,\n  light: PropTypes.bool,\n  isMini: PropTypes.bool\n};\nexport default DashboardNavbar;\nvar _c;\n$RefreshReg$(_c, \"DashboardNavbar\");","map":{"version":3,"names":["useState","useEffect","useLocation","Link","useNavigate","PropTypes","AppBar","Toolbar","IconButton","Menu","Icon","SoftBox","SoftTypography","SoftInput","Breadcrumbs","NotificationItem","navbar","navbarContainer","navbarRow","navbarIconButton","navbarMobileMenu","useSoftUIController","setTransparentNavbar","setMiniSidenav","setOpenConfigurator","AdbIcon","SettingsIcon","jsxDEV","_jsxDEV","DashboardNavbar","absolute","light","isMini","_s","navbarType","setNavbarType","controller","dispatch","miniSidenav","transparentNavbar","fixedNavbar","openConfigurator","openMenu","setOpenMenu","isLoggedIn","setIsLoggedIn","route","pathname","split","slice","navigate","handleTransparentNavbar","window","scrollY","addEventListener","removeEventListener","currentUser","localStorage","getItem","handleMiniSidenav","handleConfiguratorOpen","handleOpenMenu","event","currentTarget","handleCloseMenu","handleSignInOut","alert","renderMenu","anchorEl","anchorReference","anchorOrigin","vertical","horizontal","open","Boolean","onClose","sx","mt","children","image","fileName","_jsxFileName","lineNumber","columnNumber","title","date","onClick","position","color","theme","to","style","textDecoration","variant","fontWeight","flexWrap","alignItems","gap","spacing","display","size","_c","defaultProps","propTypes","bool","$RefreshReg$"],"sources":["/Users/alyssayee/Library/Mobile Documents/com~apple~CloudDocs/School/College/UCD/Classes/ECS 273/github/FitBot/fitbot/frontend/src/examples/Navbars/DashboardNavbar/index.js"],"sourcesContent":["/**\n=========================================================\n* Soft UI Dashboard React - v4.0.1\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/soft-ui-dashboard-react\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\n// import { useState, useEffect } from \"react\";\n\n// // react-router components\n// import { useLocation, Link } from \"react-router-dom\";\n\n// // prop-types is a library for typechecking of props.\n// import PropTypes from \"prop-types\";\n\n// // @material-ui core components\n// import AppBar from \"@mui/material/AppBar\";\n// import Toolbar from \"@mui/material/Toolbar\";\n// import IconButton from \"@mui/material/IconButton\";\n// import Menu from \"@mui/material/Menu\";\n// import Icon from \"@mui/material/Icon\";\n\n// // Soft UI Dashboard React components\n// import SoftBox from \"../../../components/SoftBox\";\n// import SoftTypography from \"../../../components/SoftTypography\";\n// import SoftInput from \"../../../components/SoftInput\";\n\n// // Soft UI Dashboard React examples\n// import Breadcrumbs from \"../../Breadcrumbs\";\n// import NotificationItem from \"../../Items/NotificationItem\";\n\n// // Custom styles for DashboardNavbar\n// import {\n//   navbar,\n//   navbarContainer,\n//   navbarRow,\n//   navbarIconButton,\n//   navbarMobileMenu,\n// } from \"../../../examples/Navbars/DashboardNavbar/styles\";\n\n// // Soft UI Dashboard React context\n// import {\n//   useSoftUIController,\n//   setTransparentNavbar,\n//   setMiniSidenav,\n//   setOpenConfigurator,\n// } from \"../../../context\";\n\n// // Images\n// // import team2 from \"../../../assets/images/team-2.jpg\";\n// // import logoSpotify from \"../../../assets/images/small-logos/logo-spotify.svg\";\n// import AdbIcon from '@mui/icons-material/Adb';\n// import SettingsIcon from '@mui/icons-material/Settings';\n// function DashboardNavbar({ absolute, light, isMini }) {\n//   const [navbarType, setNavbarType] = useState();\n//   const [controller, dispatch] = useSoftUIController();\n//   const { miniSidenav, transparentNavbar, fixedNavbar, openConfigurator } = controller;\n//   const [openMenu, setOpenMenu] = useState(false);\n//   const route = useLocation().pathname.split(\"/\").slice(1);\n\n//   useEffect(() => {\n//     // Setting the navbar type\n//     if (fixedNavbar) {\n//       setNavbarType(\"sticky\");\n//     } else {\n//       setNavbarType(\"static\");\n//     }\n\n//     // A function that sets the transparent state of the navbar.\n//     function handleTransparentNavbar() {\n//       setTransparentNavbar(dispatch, (fixedNavbar && window.scrollY === 0) || !fixedNavbar);\n//     }\n\n//     window.addEventListener(\"scroll\", handleTransparentNavbar);\n//     handleTransparentNavbar();\n//     return () => window.removeEventListener(\"scroll\", handleTransparentNavbar);\n//   }, [dispatch, fixedNavbar]);\n\n//   const handleMiniSidenav = () => setMiniSidenav(dispatch, !miniSidenav);\n//   const handleConfiguratorOpen = () => setOpenConfigurator(dispatch, !openConfigurator);\n//   const handleOpenMenu = (event) => setOpenMenu(event.currentTarget);\n//   const handleCloseMenu = () => setOpenMenu(false);\n\n//   // Render the notifications menu\n//   const renderMenu = () => (\n//     <Menu\n//       anchorEl={openMenu}\n//       anchorReference={null}\n//       anchorOrigin={{\n//         vertical: \"bottom\",\n//         horizontal: \"left\",\n//       }}\n//       open={Boolean(openMenu)}\n//       onClose={handleCloseMenu}\n//       sx={{ mt: 2 }}\n//     >\n//       <NotificationItem\n//         image={<AdbIcon />}\n//         title={[\"New message\", \"from Bot\"]}\n//         date=\"1 minutes ago\"\n//         onClick={handleCloseMenu}\n//       />\n//     </Menu>\n//   );\n\n//   return (\n//     <AppBar\n//       position={absolute ? \"absolute\" : navbarType}\n//       color=\"inherit\"\n//       sx={(theme) => navbar(theme, { transparentNavbar, absolute, light })}\n//     >\n//       <Toolbar sx={(theme) => navbarContainer(theme)}>\n//       <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n//         <SoftTypography variant=\"h6\" fontWeight=\"bold\" color=\"primary\">\n//           FitBot\n//         </SoftTypography>\n//       </Link>\n\n      \n    \n//         {isMini ? null : (\n//           <SoftBox\n//             sx={(theme) => ({\n//               ...navbarRow(theme, { isMini }),\n//               flexWrap: \"nowrap\",           // Prevent wrapping\n//               alignItems: \"center\",         // Vertical alignment\n//               gap: theme.spacing(2),        // More spacing between items\n//             })}\n//           >\n//             <SoftBox color={light ? \"white\" : \"inherit\"} sx={{ display: \"flex\", gap: 2 }}>\n//               <Link to=\"/sign-in\">\n//                 <IconButton sx={{ ...navbarIconButton, display: \"flex\", alignItems: \"center\", gap: 0.5 }} size=\"small\">\n//                   <SoftTypography variant=\"button\" fontWeight=\"medium\">\n//                     Sign In/Out\n//                   </SoftTypography>\n//                 </IconButton>\n//               </Link>\n//               <Link to=\"/settings\">\n//                 <IconButton\n//                   size=\"small\"\n//                   color=\"inherit\"\n//                   sx={navbarIconButton}\n//                   // onClick={handleConfiguratorOpen}\n//                 >\n//                   <SettingsIcon />\n//                 </IconButton>\n//               </Link>\n//               <IconButton\n//                 size=\"small\"\n//                 color=\"inherit\"\n//                 sx={navbarIconButton}\n//                 aria-controls=\"notification-menu\"\n//                 aria-haspopup=\"true\"\n//                 variant=\"contained\"\n//                 onClick={handleOpenMenu}\n//               >\n//                 <AdbIcon />\n//               </IconButton>\n//               {renderMenu()}\n//             </SoftBox>\n//           </SoftBox>\n//         )}\n//       </Toolbar>\n//     </AppBar>\n//   );\n// }\n\n// // Setting default values for the props of DashboardNavbar\n// DashboardNavbar.defaultProps = {\n//   absolute: false,\n//   light: false,\n//   isMini: false,\n// };\n\n// // Typechecking props for the DashboardNavbar\n// DashboardNavbar.propTypes = {\n//   absolute: PropTypes.bool,\n//   light: PropTypes.bool,\n//   isMini: PropTypes.bool,\n// };\n\n// export default DashboardNavbar;\n\nimport { useState, useEffect } from \"react\";\nimport { useLocation, Link, useNavigate } from \"react-router-dom\";  // ✅ added useNavigate\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Menu from \"@mui/material/Menu\";\nimport Icon from \"@mui/material/Icon\";\nimport SoftBox from \"../../../components/SoftBox\";\nimport SoftTypography from \"../../../components/SoftTypography\";\nimport SoftInput from \"../../../components/SoftInput\";\nimport Breadcrumbs from \"../../Breadcrumbs\";\nimport NotificationItem from \"../../Items/NotificationItem\";\nimport {\n  navbar,\n  navbarContainer,\n  navbarRow,\n  navbarIconButton,\n  navbarMobileMenu,\n} from \"./styles\";\nimport {\n  useSoftUIController,\n  setTransparentNavbar,\n  setMiniSidenav,\n  setOpenConfigurator,\n} from \"../../../context\";\nimport AdbIcon from '@mui/icons-material/Adb';\nimport SettingsIcon from '@mui/icons-material/Settings';\n\nfunction DashboardNavbar({ absolute, light, isMini }) {\n  const [navbarType, setNavbarType] = useState();\n  const [controller, dispatch] = useSoftUIController();\n  const { miniSidenav, transparentNavbar, fixedNavbar, openConfigurator } = controller;\n  const [openMenu, setOpenMenu] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);  // ✅ state to track login status\n  const route = useLocation().pathname.split(\"/\").slice(1);\n  const navigate = useNavigate();  // ✅ hook for navigation\n\n  useEffect(() => {\n    // Setting the navbar type\n    if (fixedNavbar) {\n      setNavbarType(\"sticky\");\n    } else {\n      setNavbarType(\"static\");\n    }\n\n    function handleTransparentNavbar() {\n      setTransparentNavbar(dispatch, (fixedNavbar && window.scrollY === 0) || !fixedNavbar);\n    }\n\n    window.addEventListener(\"scroll\", handleTransparentNavbar);\n    handleTransparentNavbar();\n    return () => window.removeEventListener(\"scroll\", handleTransparentNavbar);\n  }, [dispatch, fixedNavbar]);\n\n  useEffect(() => {\n    const currentUser = localStorage.getItem(\"currentUser\");\n    setIsLoggedIn(!!currentUser);  // ✅ check login status on mount\n  }, [route]); // ✅ update login status when route changes\n\n  const handleMiniSidenav = () => setMiniSidenav(dispatch, !miniSidenav);\n  const handleConfiguratorOpen = () => setOpenConfigurator(dispatch, !openConfigurator);\n  const handleOpenMenu = (event) => setOpenMenu(event.currentTarget);\n  const handleCloseMenu = () => setOpenMenu(false);\n\n  // const handleSignInOut = () => {\n  //   const currentUser = localStorage.getItem(\"currentUser\");\n  //   if (currentUser) {\n  //     localStorage.removeItem(\"currentUser\");  // ✅ log out\n  //     setIsLoggedIn(false);\n  //     alert(\"You have been logged out.\");\n  //     navigate(\"/sign-in\");\n  //   } else {\n  //     navigate(\"/sign-in\");  // ✅ if not logged in, go to sign-in page\n  //   }\n  // };\n  const handleSignInOut = () => {\n    const currentUser = localStorage.getItem(\"currentUser\");\n    if (currentUser) {\n      // Comment or remove this line to keep localStorage intact\n      // localStorage.removeItem(\"currentUser\");  // No longer removing currentUser\n  \n      setIsLoggedIn(false);  // Mark as logged out in the UI\n      alert(\"You have been logged out.\");\n      navigate(\"/sign-in\");  // Redirect to the sign-in page\n    } else {\n      navigate(\"/sign-in\");  // If not logged in, just go to the sign-in page\n    }\n  };\n  \n  const renderMenu = () => (\n    <Menu\n      anchorEl={openMenu}\n      anchorReference={null}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"left\",\n      }}\n      open={Boolean(openMenu)}\n      onClose={handleCloseMenu}\n      sx={{ mt: 2 }}\n    >\n      <NotificationItem\n        image={<AdbIcon />}\n        title={[\"New message\", \"from Bot\"]}\n        date=\"1 minutes ago\"\n        onClick={handleCloseMenu}\n      />\n    </Menu>\n  );\n\n  return (\n    <AppBar\n      position={absolute ? \"absolute\" : navbarType}\n      color=\"inherit\"\n      sx={(theme) => navbar(theme, { transparentNavbar, absolute, light })}\n    >\n      <Toolbar sx={(theme) => navbarContainer(theme)}>\n        <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n          <SoftTypography variant=\"h6\" fontWeight=\"bold\" color=\"primary\">\n            FitBot\n          </SoftTypography>\n        </Link>\n\n        {isMini ? null : (\n          <SoftBox\n            sx={(theme) => ({\n              ...navbarRow(theme, { isMini }),\n              flexWrap: \"nowrap\",\n              alignItems: \"center\",\n              gap: theme.spacing(2),\n            })}\n          >\n            <SoftBox color={light ? \"white\" : \"inherit\"} sx={{ display: \"flex\", gap: 2 }}>\n              <IconButton\n                sx={{ ...navbarIconButton, display: \"flex\", alignItems: \"center\", gap: 0.5 }}\n                size=\"small\"\n                onClick={handleSignInOut}  // ✅ use function instead of <Link>\n              >\n                <SoftTypography variant=\"button\" fontWeight=\"medium\">\n                  {isLoggedIn ? \"Sign Out\" : \"Sign In\"}  {/* ✅ dynamic label */}\n                </SoftTypography>\n              </IconButton>\n\n              <Link to=\"/settings\">\n                <IconButton\n                  size=\"small\"\n                  color=\"inherit\"\n                  sx={navbarIconButton}\n                >\n                  <SettingsIcon />\n                </IconButton>\n              </Link>\n\n              <IconButton\n                size=\"small\"\n                color=\"inherit\"\n                sx={navbarIconButton}\n                aria-controls=\"notification-menu\"\n                aria-haspopup=\"true\"\n                variant=\"contained\"\n                onClick={handleOpenMenu}\n              >\n                <AdbIcon />\n              </IconButton>\n\n              {renderMenu()}\n            </SoftBox>\n          </SoftBox>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nDashboardNavbar.defaultProps = {\n  absolute: false,\n  light: false,\n  isMini: false,\n};\n\nDashboardNavbar.propTypes = {\n  absolute: PropTypes.bool,\n  light: PropTypes.bool,\n  isMini: PropTypes.bool,\n};\n\nexport default DashboardNavbar;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAE;AACpE,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,OAAO,MAAM,6BAA6B;AACjD,OAAOC,cAAc,MAAM,oCAAoC;AAC/D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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}