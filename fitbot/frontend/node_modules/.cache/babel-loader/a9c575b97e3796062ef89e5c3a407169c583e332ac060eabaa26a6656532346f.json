{"ast":null,"code":"import Color from '../Color.js';\nimport mix from '../generator/mix.js';\n\n/**\n * @license\n *\n * The APCA contrast prediction algorithm is based of the formulas published\n * in the APCA-1.0.98G specification by Myndex. The specification is available at:\n * https://raw.githubusercontent.com/Myndex/apca-w3/master/images/APCAw3_0.1.17_APCA0.0.98G.svg\n *\n * Note that the APCA implementation is still beta, so please update to\n * future versions of chroma.js when they become available.\n *\n * You can read more about the APCA Readability Criterion at\n * https://readtech.org/ARC/\n */\n\n// constants\nconst W_offset = 0.027;\nconst P_in = 0.0005;\nconst P_out = 0.1;\nconst R_scale = 1.14;\nconst B_threshold = 0.022;\nconst B_exp = 1.414;\nexport default (text, bg) => {\n  // parse input colors\n  text = new Color(text);\n  bg = new Color(bg);\n  // if text color has alpha, blend against background\n  if (text.alpha() < 1) {\n    text = mix(bg, text, text.alpha(), 'rgb');\n  }\n  const l_text = lum(...text.rgb());\n  const l_bg = lum(...bg.rgb());\n\n  // soft clamp black levels\n  const Y_text = l_text >= B_threshold ? l_text : l_text + Math.pow(B_threshold - l_text, B_exp);\n  const Y_bg = l_bg >= B_threshold ? l_bg : l_bg + Math.pow(B_threshold - l_bg, B_exp);\n\n  // normal polarity (dark text on light background)\n  const S_norm = Math.pow(Y_bg, 0.56) - Math.pow(Y_text, 0.57);\n  // reverse polarity (light text on dark background)\n  const S_rev = Math.pow(Y_bg, 0.65) - Math.pow(Y_text, 0.62);\n  // clamp noise then scale\n  const C = Math.abs(Y_bg - Y_text) < P_in ? 0 : Y_text < Y_bg ? S_norm * R_scale : S_rev * R_scale;\n  // clamp minimum contrast then offset\n  const S_apc = Math.abs(C) < P_out ? 0 : C > 0 ? C - W_offset : C + W_offset;\n  // scale to 100\n  return S_apc * 100;\n};\nfunction lum(r, g, b) {\n  return 0.2126729 * Math.pow(r / 255, 2.4) + 0.7151522 * Math.pow(g / 255, 2.4) + 0.072175 * Math.pow(b / 255, 2.4);\n}","map":{"version":3,"names":["Color","mix","W_offset","P_in","P_out","R_scale","B_threshold","B_exp","text","bg","alpha","l_text","lum","rgb","l_bg","Y_text","Math","pow","Y_bg","S_norm","S_rev","C","abs","S_apc","r","g","b"],"sources":["/Users/alyssayee/Library/Mobile Documents/com~apple~CloudDocs/School/College/UCD/Classes/ECS 273/github/FitBot/fitbot/node_modules/chroma-js/src/utils/contrastAPCA.js"],"sourcesContent":["import Color from '../Color.js';\nimport mix from '../generator/mix.js';\n\n/**\n * @license\n *\n * The APCA contrast prediction algorithm is based of the formulas published\n * in the APCA-1.0.98G specification by Myndex. The specification is available at:\n * https://raw.githubusercontent.com/Myndex/apca-w3/master/images/APCAw3_0.1.17_APCA0.0.98G.svg\n *\n * Note that the APCA implementation is still beta, so please update to\n * future versions of chroma.js when they become available.\n *\n * You can read more about the APCA Readability Criterion at\n * https://readtech.org/ARC/\n */\n\n// constants\nconst W_offset = 0.027;\nconst P_in = 0.0005;\nconst P_out = 0.1;\nconst R_scale = 1.14;\nconst B_threshold = 0.022;\nconst B_exp = 1.414;\n\nexport default (text, bg) => {\n    // parse input colors\n    text = new Color(text);\n    bg = new Color(bg);\n    // if text color has alpha, blend against background\n    if (text.alpha() < 1) {\n        text = mix(bg, text, text.alpha(), 'rgb');\n    }\n    const l_text = lum(...text.rgb());\n    const l_bg = lum(...bg.rgb());\n\n    // soft clamp black levels\n    const Y_text =\n        l_text >= B_threshold\n            ? l_text\n            : l_text + Math.pow(B_threshold - l_text, B_exp);\n    const Y_bg =\n        l_bg >= B_threshold ? l_bg : l_bg + Math.pow(B_threshold - l_bg, B_exp);\n\n    // normal polarity (dark text on light background)\n    const S_norm = Math.pow(Y_bg, 0.56) - Math.pow(Y_text, 0.57);\n    // reverse polarity (light text on dark background)\n    const S_rev = Math.pow(Y_bg, 0.65) - Math.pow(Y_text, 0.62);\n    // clamp noise then scale\n    const C =\n        Math.abs(Y_bg - Y_text) < P_in\n            ? 0\n            : Y_text < Y_bg\n              ? S_norm * R_scale\n              : S_rev * R_scale;\n    // clamp minimum contrast then offset\n    const S_apc = Math.abs(C) < P_out ? 0 : C > 0 ? C - W_offset : C + W_offset;\n    // scale to 100\n    return S_apc * 100;\n};\n\nfunction lum(r, g, b) {\n    return (\n        0.2126729 * Math.pow(r / 255, 2.4) +\n        0.7151522 * Math.pow(g / 255, 2.4) +\n        0.072175 * Math.pow(b / 255, 2.4)\n    );\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,aAAa;AAC/B,OAAOC,GAAG,MAAM,qBAAqB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMC,QAAQ,GAAG,KAAK;AACtB,MAAMC,IAAI,GAAG,MAAM;AACnB,MAAMC,KAAK,GAAG,GAAG;AACjB,MAAMC,OAAO,GAAG,IAAI;AACpB,MAAMC,WAAW,GAAG,KAAK;AACzB,MAAMC,KAAK,GAAG,KAAK;AAEnB,eAAe,CAACC,IAAI,EAAEC,EAAE,KAAK;EACzB;EACAD,IAAI,GAAG,IAAIR,KAAK,CAACQ,IAAI,CAAC;EACtBC,EAAE,GAAG,IAAIT,KAAK,CAACS,EAAE,CAAC;EAClB;EACA,IAAID,IAAI,CAACE,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE;IAClBF,IAAI,GAAGP,GAAG,CAACQ,EAAE,EAAED,IAAI,EAAEA,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC;EAC7C;EACA,MAAMC,MAAM,GAAGC,GAAG,CAAC,GAAGJ,IAAI,CAACK,GAAG,CAAC,CAAC,CAAC;EACjC,MAAMC,IAAI,GAAGF,GAAG,CAAC,GAAGH,EAAE,CAACI,GAAG,CAAC,CAAC,CAAC;;EAE7B;EACA,MAAME,MAAM,GACRJ,MAAM,IAAIL,WAAW,GACfK,MAAM,GACNA,MAAM,GAAGK,IAAI,CAACC,GAAG,CAACX,WAAW,GAAGK,MAAM,EAAEJ,KAAK,CAAC;EACxD,MAAMW,IAAI,GACNJ,IAAI,IAAIR,WAAW,GAAGQ,IAAI,GAAGA,IAAI,GAAGE,IAAI,CAACC,GAAG,CAACX,WAAW,GAAGQ,IAAI,EAAEP,KAAK,CAAC;;EAE3E;EACA,MAAMY,MAAM,GAAGH,IAAI,CAACC,GAAG,CAACC,IAAI,EAAE,IAAI,CAAC,GAAGF,IAAI,CAACC,GAAG,CAACF,MAAM,EAAE,IAAI,CAAC;EAC5D;EACA,MAAMK,KAAK,GAAGJ,IAAI,CAACC,GAAG,CAACC,IAAI,EAAE,IAAI,CAAC,GAAGF,IAAI,CAACC,GAAG,CAACF,MAAM,EAAE,IAAI,CAAC;EAC3D;EACA,MAAMM,CAAC,GACHL,IAAI,CAACM,GAAG,CAACJ,IAAI,GAAGH,MAAM,CAAC,GAAGZ,IAAI,GACxB,CAAC,GACDY,MAAM,GAAGG,IAAI,GACXC,MAAM,GAAGd,OAAO,GAChBe,KAAK,GAAGf,OAAO;EAC3B;EACA,MAAMkB,KAAK,GAAGP,IAAI,CAACM,GAAG,CAACD,CAAC,CAAC,GAAGjB,KAAK,GAAG,CAAC,GAAGiB,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAGnB,QAAQ,GAAGmB,CAAC,GAAGnB,QAAQ;EAC3E;EACA,OAAOqB,KAAK,GAAG,GAAG;AACtB,CAAC;AAED,SAASX,GAAGA,CAACY,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAClB,OACI,SAAS,GAAGV,IAAI,CAACC,GAAG,CAACO,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,GAClC,SAAS,GAAGR,IAAI,CAACC,GAAG,CAACQ,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,GAClC,QAAQ,GAAGT,IAAI,CAACC,GAAG,CAACS,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC;AAEzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}